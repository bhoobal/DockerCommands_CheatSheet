
Prerequisite
Kubernetes
Install docker on Ubuntu
Docker
docker container rm -f $(docker container ls -a -q)
docker swarm leave -f
Docker image push
Remove images
docker container ls --all
Start/stop docker service
Powershell commandlets
Installing VirtualBox
Questions/Clarifications
How to ?
Links
Install k8s
Quickstart for Calico on Kubernetes
Troubleshooting


Prerequisite
Enable Hyper-v
Windows feature or Powershell

For ease of automation Install chocolatey

Kubernetes

Set-ExecutionPolicy Bypass -Scope Process -Force; iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))

# -------------------------------------------------------------------------------------------------------------------------------------------------
# deploy and configure kubernetes dashboard on local
URL : http://localhost:8001/api/v1/namespaces/kubernetes-dashboard/services/https:kubernetes-dashboard:/proxy/#/statefulset?namespace=default
to get token: kubectl -n kubernetes-dashboard describe secret kubernetes-dashboard

default dashboard with admin previlage

kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.4.0/aio/deploy/recommended.yaml
# -------------------------------------------------------------------------------------------------------------------------------------------------

Install docker on Ubuntu

    7  cat /etc/lsb-release
    8  docker
    9  apt install docker.io
   10  apt-get remove docker docker-engine docker.io
   11  apt-get update
   12  sudo apt-get install     apt-transport-https     ca-certificates     curl     software-properties-common
   13  curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
   14  sudo add-apt-repository    "deb [arch=amd64] https://download.docker.com/linux/ubuntu \
   $(lsb_release -cs) \
   stable"
   15  sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
   16  sudo apt-get update
   17  apt-cache policy docker-ce
   18  sudo apt-get install -y docker-ce
   19  sudo systemctl status docker
   20  docker version
   21  history


Docker
Basic commands

>docker info  //shows docker version

>docker version

docker ps  // lists all containers running containers -all lists out all containers
Docker ps -all
Docler ps -as
// as list out all container with size 

>docker images  //list all images
>docker image //manage images
>docker image history //shows history 

//pull docker image using tag
>docker pull microsoft/windowsservercore:1803

docker run hello-world

docker run -it microsoft/windowsservercore powershell

>docker container run microsoft/windowsservercore systeminfo

Build docker image

Create a docker file

dockerfile reference

/***********************************************************/
# Comment
INSTRUCTION arguments
/***********************************************************/



  14 git clone https://github.com/bhoobal/DockerWorkouts.git

  26 docker build --help

  29 docker build -t mysite C:\temp\

  44 docker start mysite
  45 docker kill
  46 docker ps
  47 docker run -d --name=mysite -p 8080:8080 mysite


  50 start http://$(docker inspect -f '{{ .NetworkSettings.Networks.nat.IPAddress }}' mysite):8080

  61 docker run --name mysite /bin/sh cmd

docker run -d 7b53ea31487e
Docker run -d imageid
-d run container in detached mode
  64 docker exec mysite -ti powershell

  65 docker exec -i mysite cmd

  66 docker stop mysite
  67 docker ps

$docker inspect container- id


This stops and removes all running containers, and then leaves the swarm - ignore any error messages you see:
docker container rm -f $(docker container ls -a -q)
docker swarm leave -f

docker container run microsoft/nanoserver powershell Write-Output Hello DockerCon 2017!
created a new container from the microsoft/nanoserver image, which has a basic Nano Server deployment, maintained by Microsoft
started the container, running the powershell command and passing the Write-Output... arguments
relayed the console output from the container to the PowerShell window
Docker image push
Create image
Tag it
Docker login
Push the image
docker images
docker tag c9d72840516c bhoobal/demodockerwebapplication:latest
docker push demodockerwebapplication:latest
docker images
docker push bhoobal/demodockerwebapplication

Remove images
docker rmi $(docker images -q)
docker rmi $(docker images -q) --force

THe above command check for local image, if not found downloads it from repo
How it finds the repo?
How to setup a private repo and how to connect to it
Where to setup manual

docker container ls --all
List all containers, check the status running or exited, what are other statuses?

Handling docker images
List images
>docker images
PS C:\WINDOWS\system32> docker images
REPOSITORY             TAG                 IMAGE ID            CREATED             SIZE
microsoft/nanoserver   10.0.14393.2068     8a62949f0058        2 months ago        1.11GB

Force delete multiple images
Ex: >docker rmi 1f1cdd1a9808 7bc42cc48a84 f4d21eb79928 -f
Kill container
>docker kill CONTAINER 4aa73ffaec03
docker image inspect
docker images -f dangling=true

Start/stop docker service
Net stop com.docker.service
Net start com.docker.service

Powershell commandlets
Get-windowsfeature


Errors

PS C:\WINDOWS\system32> docker version
Client:
 Version:      18.03.1-ce
 API version:  1.37
 Go version:   go1.9.5
 Git commit:   9ee9f40
 Built:        Thu Apr 26 07:12:48 2018
 OS/Arch:      windows/amd64
 Experimental: false
 Orchestrator: swarm
error during connect: Get http://%2F%2F.%2Fpipe%2Fdocker_engine/v1.37/version: open //./pipe/docker_engine: The system cannot find the file specified. In the default daemon configuration on Windows, the docker client must be run elevated to connect. This error may also indicate that the docker daemon is not running.




Enable expose daemon
Switch to linux and windows container
Stop and start docker service



Installing VirtualBox

PS C:\temp> minikube start

Starting local Kubernetes v1.10.0 cluster...
Starting VM...
E0503 12:17:19.505805   14712 start.go:159] Error starting host: Error creating host: Error executing step: Running precreate checks.
: VBoxManage not found. Make sure VirtualBox is installed and VBoxManage is in the path.

 Retrying.
E0503 12:17:19.508800   14712 start.go:165] Error starting host:  Error creating host: Error executing step: Running precreate checks.
: VBoxManage not found. Make sure VirtualBox is installed and VBoxManage is in the path

PS C:\temp> choco install virtualbox
Chocolatey v0.10.10
[Pending] Removing incomplete install for 'virtualbox'
Installing the following packages:
virtualbox
By installing you accept licenses for the packages.

virtualbox v5.2.10 [Approved]
virtualbox package files install completed. Performing other installation steps.
The package virtualbox wants to run 'chocolateyInstall.ps1'.
Note: If you don't run this script, the installation will fail.
Note: To confirm automatically next time, use '-y' or consider:
choco feature enable -n allowGlobalConfirmation
Do you want to run the script?([Y]es/[N]o/[P]rint): y

File appears to be downloaded already. Verifying with package checksum to determine if it needs to be redownloaded.
Error - hashes do not match. Actual value was '13D4D95D0F263EC219626BFF5CA7E208985BE98D5EA4C3ECD10773AF52A3A513'.
Downloading virtualbox 64 bit
  from 'https://download.virtualbox.org/virtualbox/5.2.10/VirtualBox-5.2.10-122406-Win.exe'
Progress: 100% - Completed download of C:\Users\bpalani\AppData\Local\Temp\chocolatey\virtualbox\5.2.10\VirtualBox-5.2.10-122406-Win.exe (108.49 MB).
Download of VirtualBox-5.2.10-122406-Win.exe (108.49 MB) completed.
Hashes match.
Installing virtualbox...
virtualbox has been installed.
Installing extension pack
Downloading virtualbox-extensionpack 64 bit
  from 'https://download.virtualbox.org/virtualbox/5.2.10/Oracle_VM_VirtualBox_Extension_Pack-5.2.10.vbox-extpack'
WARNING: C:\Users\bpalani\AppData\Local\Temp\chocolatey\virtualbox\5.2.10\Oracle_VM_VirtualBox_Extension_Pack-5.2.10.vbox-extpack is of content type text/plain
Progress: 100% - Completed download of C:\Users\bpalani\AppData\Local\Temp\chocolatey\virtualbox\5.2.10\Oracle_VM_VirtualBox_Extension_Pack-5.2.10.vbox-extpack (18.69 MB).
Download of Oracle_VM_VirtualBox_Extension_Pack-5.2.10.vbox-extpack (18.69 MB) completed.
Hashes match.
C:\Users\bpalani\AppData\Local\Temp\chocolatey\virtualbox\5.2.10\Oracle_VM_VirtualBox_Extension_Pack-5.2.10.vbox-extpack
VirtualBox Extension Pack Personal Use and Evaluation License (PUEL)
.
.
.
Do you agree to these license terms and conditions (y/n)?
License accepted. For batch installaltion add
--accept-license=56be48f923303c8cababb0bb4c478284b688ed23f16d775d729b89a2e8e5f9eb
to the VBoxManage command line.

Successfully installed "Oracle VM VirtualBox Extension Pack".
Adding to PATH if needed
PATH environment variable does not have C:\Program Files\Oracle\VirtualBox in it. Adding...
virtualbox installed to 'C:\Program Files\Oracle\VirtualBox'
virtualbox registered as vbox
  virtualbox may be able to be automatically uninstalled.
Environment Vars (like PATH) have changed. Close/reopen your shell to
 see the changes (or in powershell/cmd.exe just type `refreshenv`).
 The install of virtualbox was successful.
  Software installed as 'EXE', install location is likely default.

Chocolatey installed 1/1 packages.
 See the log for details (C:\ProgramData\chocolatey\logs\chocolatey.log).
PS C:\temp>



Questions/Clarifications
Docker is cross-platform, so you can manage Linux hosts from Windows clients, and Windows hosts from Linux or Mac clients.??
Docker caches the image layers ?

How to ?

docker run -d -p 80:80
How to publish/expose port 80/443 on same virtual site in IIS?


Links
Sample index page
Java script http://computing.dcu.ie/~humphrys/test.javascript.html

Windows images for containers:  https://hub.docker.com/r/microsoft
Dont have to start from scratch
Updated on fairly regular basis

Why docker?
Modernization, saving it cost
Improve devops and portability



Install Docker on linux

yum update

sudo yum install docker
[root@ip-10-97-96-191 init.d]# docker version
Client:
 Version:      17.06.2-ce
 API version:  1.30
 Go version:   go1.8.3
 Git commit:   3dfb8343b139d6342acfd9975d7f1068b5b1c3d3
 Built:        Tue Nov 14 22:03:51 2017
 OS/Arch:      linux/amd64

Server:
 Version:      17.06.2-ce
 API version:  1.30 (minimum version 1.12)
 Go version:   go1.8.3
 Git commit:   402dd4a/17.06.2-ce
 Built:        Tue Nov 14 22:04:39 2017
 OS/Arch:      linux/amd64
 Experimental: false



you can't run Linux-based containers on Windows
When you run a process inside a container, the process actually runs on the host and you can see it listed in Task Manager or Get-Process


Check linux/ubuntu version

root@ip-10-97-111-5:~# cat /etc/issue
Ubuntu 16.04.4 LTS \n \l

root@ip-10-97-111-5:~# uname -a
Linux ip-10-97-111-5 4.4.0-1052-aws #61-Ubuntu SMP Mon Feb 12 23:05:58 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux



root@ip-10-97-111-5:~# cat /etc/lsb-release
DISTRIB_ID=Ubuntu
DISTRIB_RELEASE=16.04
DISTRIB_CODENAME=xenial
DISTRIB_DESCRIPTION="Ubuntu 16.04.4 LTS"

root@ip-10-97-111-5:~# cat /etc/os-release
NAME="Ubuntu"
VERSION="16.04.4 LTS (Xenial Xerus)"
ID=ubuntu
ID_LIKE=debian
PRETTY_NAME="Ubuntu 16.04.4 LTS"
VERSION_ID="16.04"
HOME_URL="http://www.ubuntu.com/"
SUPPORT_URL="http://help.ubuntu.com/"
BUG_REPORT_URL="http://bugs.launchpad.net/ubuntu/"
VERSION_CODENAME=xenial
UBUNTU_CODENAME=xenial

Find out the hostname

root@ip-10-97-111-5:~# hostnamectl
   Static hostname: ip-10-97-111-5
         Icon name: computer-vm
           Chassis: vm
        Machine ID: c4061a8ffeac44b69a9cda88414075f3
           Boot ID: f9c49e1e28a846c6a4b0a63c762d111a
    Virtualization: xen
  Operating System: Ubuntu 16.04.4 LTS
            Kernel: Linux 4.4.0-1052-aws
      Architecture: x86-64
root@ip-10-97-111-5:~#



Lesson learned while installing k8s

Ubuntu 16 LTS or highrt

Install docker

Install k8s
https://www.edureka.co/blog/install-kubernetes-on-ubuntu


Kubeadm init  pull docker images


kubeadm config images pull


Kubeadmn init logs

root@ip-10-97-111-5:~# kubeadm init
I0710 10:24:59.619281   14773 feature_gate.go:230] feature gates: &{map[]}
[init] using Kubernetes version: v1.11.0
[preflight] running pre-flight checks
I0710 10:24:59.631846   14773 kernel_validator.go:81] Validating kernel version
I0710 10:24:59.631916   14773 kernel_validator.go:96] Validating kernel config
[preflight/images] Pulling images required for setting up a Kubernetes cluster
[preflight/images] This might take a minute or two, depending on the speed of your internet connection
[preflight/images] You can also perform this action in beforehand using 'kubeadm config images pull'

[kubelet] Writing kubelet environment file with flags to file "/var/lib/kubelet/kubeadm-flags.env"
[kubelet] Writing kubelet configuration to file "/var/lib/kubelet/config.yaml"
[preflight] Activating the kubelet service
[certificates] Generated ca certificate and key.
[certificates] Generated apiserver certificate and key.
[certificates] apiserver serving cert is signed for DNS names [ip-10-97-111-5 kubernetes kubernetes.default kubernetes.default.svc kubernetes.default.svc.cluster.local] and IPs [10.96.0.1 10.97.111.5]
[certificates] Generated apiserver-kubelet-client certificate and key.
[certificates] Generated sa key and public key.
[certificates] Generated front-proxy-ca certificate and key.
[certificates] Generated front-proxy-client certificate and key.
[certificates] Generated etcd/ca certificate and key.
[certificates] Generated etcd/server certificate and key.
[certificates] etcd/server serving cert is signed for DNS names [ip-10-97-111-5 localhost] and IPs [127.0.0.1 ::1]
[certificates] Generated etcd/peer certificate and key.
[certificates] etcd/peer serving cert is signed for DNS names [ip-10-97-111-5 localhost] and IPs [10.97.111.5 127.0.0.1 ::1]
[certificates] Generated etcd/healthcheck-client certificate and key.
[certificates] Generated apiserver-etcd-client certificate and key.
[certificates] valid certificates and keys now exist in "/etc/kubernetes/pki"
[kubeconfig] Wrote KubeConfig file to disk: "/etc/kubernetes/admin.conf"
[kubeconfig] Wrote KubeConfig file to disk: "/etc/kubernetes/kubelet.conf"
[kubeconfig] Wrote KubeConfig file to disk: "/etc/kubernetes/controller-manager.conf"
[kubeconfig] Wrote KubeConfig file to disk: "/etc/kubernetes/scheduler.conf"
[controlplane] wrote Static Pod manifest for component kube-apiserver to "/etc/kubernetes/manifests/kube-apiserver.yaml"
[controlplane] wrote Static Pod manifest for component kube-controller-manager to "/etc/kubernetes/manifests/kube-controller-manager.yaml"
[controlplane] wrote Static Pod manifest for component kube-scheduler to "/etc/kubernetes/manifests/kube-scheduler.yaml"
[etcd] Wrote Static Pod manifest for a local etcd instance to "/etc/kubernetes/manifests/etcd.yaml"
[init] waiting for the kubelet to boot up the control plane as Static Pods from directory "/etc/kubernetes/manifests"
[init] this might take a minute or longer if the control plane images have to be pulled
[apiclient] All control plane components are healthy after 40.501442 seconds
[uploadconfig] storing the configuration used in ConfigMap "kubeadm-config" in the "kube-system" Namespace
[kubelet] Creating a ConfigMap "kubelet-config-1.11" in namespace kube-system with the configuration for the kubelets in the cluster
[markmaster] Marking the node ip-10-97-111-5 as master by adding the label "node-role.kubernetes.io/master=''"
[markmaster] Marking the node ip-10-97-111-5 as master by adding the taints [node-role.kubernetes.io/master:NoSchedule]
[patchnode] Uploading the CRI Socket information "/var/run/dockershim.sock" to the Node API object "ip-10-97-111-5" as an annotation
[bootstraptoken] using token: ukd2sg.60r3xu71w8pn448k
[bootstraptoken] configured RBAC rules to allow Node Bootstrap tokens to post CSRs in order for nodes to get long term certificate credentials
[bootstraptoken] configured RBAC rules to allow the csrapprover controller automatically approve CSRs from a Node Bootstrap Token
[bootstraptoken] configured RBAC rules to allow certificate rotation for all node client certificates in the cluster
[bootstraptoken] creating the "cluster-info" ConfigMap in the "kube-public" namespace
[addons] Applied essential addon: CoreDNS
[addons] Applied essential addon: kube-proxy

Your Kubernetes master has initialized successfully!

To start using your cluster, you need to run the following as a regular user:

  mkdir -p $HOME/.kube
  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
  sudo chown $(id -u):$(id -g) $HOME/.kube/config

You should now deploy a pod network to the cluster.
Run "kubectl apply -f [podnetwork].yaml" with one of the options listed at:
  https://kubernetes.io/docs/concepts/cluster-administration/addons/

You can now join any number of machines by running the following on each node
as root:

  kubeadm join 10.97.111.5:6443 --token ukd2sg.60r3xu71w8pn448k --discovery-token-ca-cert-hash sha256:f79ea5884b159a2c0547d2788b2a5caa201caecee23086e7ec8d7c6a0d95e03f

root@ip-10-97-111-5:~#

Docker pull below k8s images 
root@ip-10-97-111-5:~# docker images
REPOSITORY                                 TAG                 IMAGE ID            CREATED             SIZE
k8s.gcr.io/kube-apiserver-amd64            v1.11.0             214c48e87f58        12 days ago         187 MB
k8s.gcr.io/kube-controller-manager-amd64   v1.11.0             55b70b420785        12 days ago         155 MB
k8s.gcr.io/kube-scheduler-amd64            v1.11.0             0e4a34a3b0e6        12 days ago         56.8 MB
k8s.gcr.io/kube-proxy-amd64                v1.11.0             1d3d7afd77d1        12 days ago         97.8 MB
k8s.gcr.io/coredns                         1.1.3               b3b94275d97c        6 weeks ago         45.6 MB
k8s.gcr.io/etcd-amd64                      3.2.18              b8df3b177be2        2 months ago        219 MB
k8s.gcr.io/pause                           3.1                 da86e6ba6ca1        6 months ago        742 kB
k8s.gcr.io/pause-amd64                     3.1                 da86e6ba6ca1        6 months ago        742 kB




Tear down kubernetes stack

Kubeadm reset
https://kubernetes.io/docs/reference/setup-tools/kubeadm/kubeadm-reset/



Install

Quickstart for Calico on Kubernetes
 

https://docs.projectcalico.org/v3.1/getting-started/kubernetes/


Troubleshooting

https://kubernetes.io/docs/setup/independent/troubleshooting-kubeadm/


How to setup k8s master node

apt-get update && apt-get install -y apt-transport-https curl
curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -
cat <<EOF >/etc/apt/sources.list.d/kubernetes.list
deb http://apt.kubernetes.io/ kubernetes-xenial main
EOF

$ apt-get update
apt-get install -y kubelet kubeadm kubectl
kubeadm reset
kubectl taint nodes --all node-role.kubernetes.io/master-
kubeadm init --pod-network-cidr=10.97.0.0/16  /* use the current subnet CIDR */
export KUBECONFIG=/etc/kubernetes/admin.conf  /*- if you are running as root user */ 
kubectl get pods --all-namespaces
kubectl get node
sysctl net.bridge.bridge-nf-call-iptables=1
kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/v0.9.1/Documentation/kube-flannel.yml
kubectl get pods --all-namespaces
kubectl get nodes
watch kubectl get pods --all-namespaces
kubectl get nodes


kubectl get pods --all-namespaces   //*  get all the pods

kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/master/src/deploy/recommended/kubernetes-dashboard.yaml

kubectl apply -f https://github.com/Microsoft/SDN/blob/master/Kubernetes/flannel/l2bridge/manifests/simpleweb.yml



kubectl --namespace=kube-system log kubernetes-dashboard-6948bdb78-w4fl2

kubectl --namespace=kube-system log kubernetes-dashboard-6948bdb78-w4fl2 -f 
// -f tail log

//*get logs specific pod 

Use --tail=10 last 10 logs 

To make the UI work

kubectl create clusterrolebinding NAME --clusterrole=cluster-admin --user=system:anonymous

kubectl create clusterrolebinding kubernetes-dashboard --clusterrole=cluster-admin --user=system:serviceaccount

kubectl create clusterrolebinding kubernetes-dashboard --clusterrole=cluster-admin --user=system:anonymous

kubectl create rolebinding bob-admin-binding --clusterrole=admin --user=bob --namespace=acme



URL for dashboard

https://54.201.108.23:6443/api/v1/namespaces/kube-system/services/https:kubernetes-dashboard:/proxy/#!/overview?namespace=default

http://::6443/api/v1/namespaces/kube-system/services/https:kubernetes-dashboard:/proxy/#!/overview?namespace=default


export KUBECONFIG=/etc/kubernetes/kubelet.conf

root@ip-10-97-111-7:~# kubectl cluster-info
Kubernetes master is running at https://10.97.111.7:6443

Error
To further debug and diagnose cluster problems, use 'kubectl cluster-info dump'.
Unable to connect to the server: x509: certificate signed by unknown authority (possibly because of "crypto/rsa: verification error" while trying to verify candidate authority certificate "kubernetes")
root@ip-10-97-111-7:~# kubectl cluster-info dump



Get the token

kubectl -n kube-system describe secret $(kubectl -n kube-system get secret | grep dashboard-viewer | awk '{print $1}')


Error
Kubeadm reset clears below error on node
[preflight] Some fatal errors occurred:
    Port 10251 is in use

Ref url for permission errors

https://kubecloud.io/kubernetes-dashboard-on-arm-with-rbac-61309310a640
https://blog.tekspace.io/kubernetes-dashboard-remote-access/


You can grant full admin privileges to Dashboard's Service Account by creating below ClusterRoleBinding. Copy the YAML file based on chosen installation method and save as, i.e. dashboard-admin.yaml. Use kubectl create -f dashboard-admin.yaml

apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: kubernetes-dashboard
  labels:
    k8s-app: kubernetes-dashboard
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
subjects:
- kind: ServiceAccount
  name: kubernetes-dashboard
  namespace: kube-system




kube-system   kube-controller-manager-ip-10-97-111-7   0/1       CrashLoopBackOff   29         1h









Resetting the master
Kubeadm reset
kubeadm init --pod-network-cidr=10.97.111.0/28


kubeadm join 10.97.111.7:6443 --token ec4ph0.00bq5qul5g1bulk6 --discovery-token-ca-cert-hash sha256:28cf5a3cf7ca0c399a74ed76e7873a57edcf5297c6343143492cf724f8774dc9




https://kubernetes.io/docs/reference/kubectl/cheatsheet/

Commands 
kubectl cluster-info
kubectl get nodes
kubectl run first-deployment --image=katacoda/docker-http-server --port=80
kubectl get deployments -o yaml
kubectl get pods
kubectl expose deployment first-deployment --port=80 --type=NodePort
kubectl describe pods
kubectl get role
export PORT=$(kubectl get svc first-deployment -o go-template='{{range.spec.ports}}{{if .nodePort}}{{.nodePort}}{{"\n"}}{{end}}{{end}}')
echo "Accessing host01:$PORT"
curl host01:$PORT
kubectl get svc first-deployment




Config Windows nodes

[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12


PS C:\k\temp> wget https://storage.googleapis.com/kubernetes-release/release/v1.10.2/kubernetes-node-windows-amd64.tar.gz -UseBasicParsing -o somefile.tar.gz



https://www.7-zip.org/a/7z1805-x64.exe









    $  cat /etc/lsb-release

    $  apt install docker.io
     apt-get remove docker docker-engine docker.io
    apt-get update
    sudo apt-get install     apt-transport-https     ca-certificates     curl     software-properties-common
    curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
    sudo add-apt-repository    "deb [arch=amd64] https://download.docker.com/linux/ubuntu \
   $(lsb_release -cs) \
   stable"
   
 sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
 sudo apt-get update
 apt-cache policy docker-ce
 sudo apt-get install -y docker-ce
 sudo systemctl status docker
 docker version


   27  apt-get update
   28  swapoff -a
   29  nano /etc/fstab
   30  apt-get update && apt-get install -y apt-transport-https curl
   31  curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -
   32  cat <<EOF >/etc/apt/sources.list.d/kubernetes.list
deb http://apt.kubernetes.io/ kubernetes-xenial main
EOF

   33  apt-get update
   34  apt-get install -y kubelet kubeadm kubectl
   35  nano /etc/systemd/system/kubelet.service.d/10-kubeadm.conf

   44  kubectl version

   45  apt-get -y install kubelet=1.11.3-00 --allow-downgrades
To download if there is an issue with control plane version

   46  kubectl version
   47  kubeadm init --pod-network-cidr=10.97.0.0/16
   48  mkdir -p $HOME/.kube
   49  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
   50  sudo chown $(id -u):$(id -g) $HOME/.kube/config
   51  kubectl get pods -o wide --all-namespaces
   52  kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml
   53  kubectl get pods -o wide --all-namespaces
   54  kubectl create -f https://raw.githubusercontent.com/kubernetes/dashboard/master/src/deploy/recommended/kubernetes-dashboard.yaml


   56  kubectl proxy

   58  kubectl proxy

   59  kubectl create serviceaccount dashboard -n default
   60  kubectl create clusterrolebinding dashboard-admin -n default   --clusterrole=cluster-admin   --serviceaccount=default:dashboard
   61  kubectl get secret $(kubectl get serviceaccount dashboard -o jsonpath="{.secrets[0].name}") -o jsonpath="{.data.token}" | base64 --decode
   62  kubectl create clusterrolebinding NAME --clusterrole=cluster-admin --user=system:anonymous
   63  kubectl cluster-info
   64  kubectl proxy

   72  cat config

 kubectl get po --show-labels=true --all-namespaces


 kubectl get node --show-labels=true --all-namespaces

LABELS
beta.kubernetes.io/arch=amd64,beta.kubernetes.io/os=linux,kubernetes.io/hostname=ip-1osi0-97-111-7,node-role.kubernetes.io/master=





